(function(o) {
    var K = o.$LAB, y = "UseLocalXHR", z = "AlwaysPreserveOrder", u = "AllowDuplicates", A = "CacheBust", B = "BasePath", C = /^[^?#]*\//.exec(location.href)[0], D = /^\w+\:\/\/\/?[^\/]+/.exec(C)[0], i = document.head || document.getElementsByTagName("head"), L = o.opera && Object.prototype.toString.call(o.opera) == "[object Opera]" || "MozAppearance" in document.documentElement.style, q = document.createElement("script"), E = typeof q.preload == "boolean", r = E || q.readyState && q.readyState == "uninitialized", F = !r && q.async === true, M = !r && !F && !L;
    function G(a) {
        return Object.prototype.toString.call(a) == "[object Function]";
    }
    function H(a) {
        return Object.prototype.toString.call(a) == "[object Array]";
    }
    function N(a, c) {
        var b = /^\w+\:\/\//;
        if (/^\/\/\/?/.test(a)) {
            a = location.protocol + a;
        } else if (!b.test(a) && a.charAt(0) != "/") {
            a = (c || "") + a;
        }
        return b.test(a) ? a : (a.charAt(0) == "/" ? D : C) + a;
    }
    function s(a, c) {
        for (var b in a) {
            if (a.hasOwnProperty(b)) {
                c[b] = a[b];
            }
        }
        return c;
    }
    function O(a) {
        var c = false;
        for (var b = 0; b < a.scripts.length; b++) {
            if (a.scripts[b].ready && a.scripts[b].exec_trigger) {
                c = true;
                a.scripts[b].exec_trigger();
                a.scripts[b].exec_trigger = null;
            }
        }
        return c;
    }
    function t(a, c, b, d) {
        a.onload = a.onreadystatechange = function() {
            if (a.readyState && a.readyState != "complete" && a.readyState != "loaded" || c[b]) return;
            a.onload = a.onreadystatechange = null;
            d();
        };
    }
    function I(a) {
        a.ready = a.finished = true;
        for (var c = 0; c < a.finished_listeners.length; c++) {
            a.finished_listeners[c]();
        }
        a.ready_listeners = [];
        a.finished_listeners = [];
    }
    function P(d, f, e, g, h) {
        setTimeout(function() {
            var a, c = f.real_src, b;
            if ("item" in i) {
                if (!i[0]) {
                    setTimeout(arguments.callee, 25);
                    return;
                }
                i = i[0];
            }
            a = document.createElement("script");
            if (f.type) a.type = f.type;
            if (f.charset) a.charset = f.charset;
            if (h) {
                if (r) {
                    e.elem = a;
                    if (E) {
                        a.preload = true;
                        a.onpreload = g;
                    } else {
                        a.onreadystatechange = function() {
                            if (a.readyState == "loaded") g();
                        };
                    }
                    a.src = c;
                } else if (h && c.indexOf(D) == 0 && d[y]) {
                    b = new XMLHttpRequest();
                    b.onreadystatechange = function() {
                        if (b.readyState == 4) {
                            b.onreadystatechange = function() {};
                            e.text = b.responseText + "\n//@ sourceURL=" + c;
                            g();
                        }
                    };
                    b.open("GET", c);
                    b.send();
                } else {
                    a.type = "text/cache-script";
                    t(a, e, "ready", function() {
                        i.removeChild(a);
                        g();
                    });
                    a.src = c;
                    i.insertBefore(a, i.firstChild);
                }
            } else if (F) {
                a.async = false;
                t(a, e, "finished", g);
                a.src = c;
                i.insertBefore(a, i.firstChild);
            } else {
                t(a, e, "finished", g);
                a.src = c;
                i.insertBefore(a, i.firstChild);
            }
        }, 0);
    }
    function J() {
        var l = {}, Q = r || M, n = [], p = {}, m;
        l[y] = true;
        l[z] = false;
        l[u] = false;
        l[A] = false;
        l[B] = "";
        function R(a, c, b) {
            var d;
            function f() {
                if (d != null) {
                    d = null;
                    I(b);
                }
            }
            if (p[c.src].finished) return;
            if (!a[u]) p[c.src].finished = true;
            d = b.elem || document.createElement("script");
            if (c.type) d.type = c.type;
            if (c.charset) d.charset = c.charset;
            t(d, b, "finished", f);
            if (b.elem) {
                b.elem = null;
            } else if (b.text) {
                d.onload = d.onreadystatechange = null;
                d.text = b.text;
            } else {
                d.src = c.real_src;
            }
            i.insertBefore(d, i.firstChild);
            if (b.text) {
                f();
            }
        }
        function S(c, b, d, f) {
            var e, g, h = function() {
                b.ready_cb(b, function() {
                    R(c, b, e);
                });
            }, j = function() {
                b.finished_cb(b, d);
            };
            b.src = N(b.src, c[B]);
            b.real_src = b.src + (c[A] ? (/\?.*$/.test(b.src) ? "&_" : "?_") + ~~(Math.random() * 1e9) + "=" : "");
            if (!p[b.src]) p[b.src] = {
                items: [],
                finished: false
            };
            g = p[b.src].items;
            if (c[u] || g.length == 0) {
                e = g[g.length] = {
                    ready: false,
                    finished: false,
                    ready_listeners: [ h ],
                    finished_listeners: [ j ]
                };
                P(c, b, e, f ? function() {
                    e.ready = true;
                    for (var a = 0; a < e.ready_listeners.length; a++) {
                        e.ready_listeners[a]();
                    }
                    e.ready_listeners = [];
                } : function() {
                    I(e);
                }, f);
            } else {
                e = g[0];
                if (e.finished) {
                    j();
                } else {
                    e.finished_listeners.push(j);
                }
            }
        }
        function v() {
            var e, g = s(l, {}), h = [], j = 0, w = false, k;
            function T(a, c) {
                a.ready = true;
                a.exec_trigger = c;
                x();
            }
            function U(a, c) {
                a.ready = a.finished = true;
                a.exec_trigger = null;
                for (var b = 0; b < c.scripts.length; b++) {
                    if (!c.scripts[b].finished) return;
                }
                c.finished = true;
                x();
            }
            function x() {
                while (j < h.length) {
                    if (G(h[j])) {
                        try {
                            h[j++]();
                        } catch (err) {
                            if (window.console) {
                                console.error(err.message);
                            }
                        }
                        continue;
                    } else if (!h[j].finished) {
                        if (O(h[j])) continue;
                        break;
                    }
                    j++;
                }
                if (j == h.length) {
                    w = false;
                    k = false;
                }
            }
            function V() {
                if (!k || !k.scripts) {
                    h.push(k = {
                        scripts: [],
                        finished: true
                    });
                }
            }
            e = {
                script: function() {
                    for (var f = 0; f < arguments.length; f++) {
                        (function(a, c) {
                            var b;
                            if (!H(a)) {
                                c = [ a ];
                            }
                            for (var d = 0; d < c.length; d++) {
                                V();
                                a = c[d];
                                if (G(a)) a = a();
                                if (!a) continue;
                                if (H(a)) {
                                    b = [].slice.call(a);
                                    b.unshift(d, 1);
                                    [].splice.apply(c, b);
                                    d--;
                                    continue;
                                }
                                if (typeof a == "string") a = {
                                    src: a
                                };
                                a = s(a, {
                                    ready: false,
                                    ready_cb: T,
                                    finished: false,
                                    finished_cb: U
                                });
                                k.finished = false;
                                k.scripts.push(a);
                                S(g, a, k, Q && w);
                                w = true;
                                if (g[z]) e.wait();
                            }
                        })(arguments[f], arguments[f]);
                    }
                    return e;
                },
                wait: function() {
                    if (arguments.length > 0) {
                        for (var a = 0; a < arguments.length; a++) {
                            h.push(arguments[a]);
                        }
                        k = h[h.length - 1];
                    } else k = false;
                    x();
                    return e;
                }
            };
            return {
                script: e.script,
                wait: e.wait,
                setOptions: function(a) {
                    s(a, g);
                    return e;
                }
            };
        }
        m = {
            setGlobalDefaults: function(a) {
                s(a, l);
                return m;
            },
            setOptions: function() {
                return v().setOptions.apply(null, arguments);
            },
            script: function() {
                return v().script.apply(null, arguments);
            },
            wait: function() {
                return v().wait.apply(null, arguments);
            },
            queueScript: function() {
                n[n.length] = {
                    type: "script",
                    args: [].slice.call(arguments)
                };
                return m;
            },
            queueWait: function() {
                n[n.length] = {
                    type: "wait",
                    args: [].slice.call(arguments)
                };
                return m;
            },
            runQueue: function() {
                var a = m, c = n.length, b = c, d;
                for (;--b >= 0; ) {
                    d = n.shift();
                    a = a[d.type].apply(null, d.args);
                }
                return a;
            },
            noConflict: function() {
                o.$LAB = K;
                return m;
            },
            sandbox: function() {
                return J();
            }
        };
        return m;
    }
    o.$LAB = J();
    (function(a, c, b) {
        if (document.readyState == null && document[a]) {
            document.readyState = "loading";
            document[a](c, b = function() {
                document.removeEventListener(c, b, false);
                document.readyState = "complete";
            }, false);
        }
    })("addEventListener", "DOMContentLoaded");
})(this);

var tfl = tfl || {};

(function(o) {
    o.mapScriptPath = "";
    o.apiUrl = "";
    o.appId = "";
    o.appKey = "";
    o.modeNameBus = "";
    o.modeNameCableCar = "";
    o.modeNameDlr = "";
    o.modeNameOverground = "";
    o.modeNameTflRail = "";
    o.modeNameRiver = "";
    o.modeNameTrain = "";
    o.modeNameTraffic = "";
    o.modeNameTram = "";
    o.modeNameTube = "";
    o.modeNameMultiModal = "";
    o.modeJourney = "";
    o.modesToExclude = [];
    o.naptanPublicBusCoachTram = "";
    o.disambiguationDataSets = "";
    o.apiErrorMessage = "";
    o.jPLandingPageUrl = "";
    o.jPResultsPageUrl = "";
    o.showBusStatusOnHomePage = "";
    o.showOnboarding = {
        personalisationStar: false
    };
    o.createAccountLink = "";
    o.isLocalStorageSupported = checkForLocalStorageSupport();
    function checkForLocalStorageSupport() {
        var test = "test";
        try {
            window.localStorage.setItem(test, test);
            window.localStorage.removeItem(test);
            return true;
        } catch (e) {
            return false;
        }
    }
})(tfl);

(function(tfl) {
    "use strict";
    tfl.dictionary = {
        MoreOptions: "Edit preferences",
        LessOptions: "Hide preferences",
        NowText: "Now",
        TodayText: "Today",
        RemoveContentClass: ".remove-content",
        DisabledRemoveContentClass: "disable-removable-content",
        JpTypeCycling: "cycling",
        JpTypeWalking: "walking",
        FirstServiceText: "First service",
        LastServiceText: "Last service",
        CurrentLocationText: "Current location ",
        MonthNames: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
        formClasses: {
            formControlWrapClass: "form-control-wrapper",
            formControlClass: "form-control",
            validationWrap: "form-field-error",
            validationMessageWrap: "field-validation-wrap",
            validationMessage: "field-validation-error",
            textAreaCounterClass: "text-area-counter",
            textAreaWithCounterClass: "text-area-with-counter",
            responsiveFormClass: "responsive-form",
            mandatoryFieldLabel: "mandatory-field-label",
            assistiveTextErrorClass: ".assistive-text-error"
        },
        messages: {
            globalErrorSmallClass: ".global-error-middle-icon",
            glbaleErrorLargeClass: ".global-error-top-icon"
        },
        hiddenElemClass: "hidden",
        browserClasses: {
            lessThanIe8: "lt-ie8",
            lessThanIe9: "lt-ie9",
            lessThanIe10: "lt-ie10",
            isSafari: "is-safari"
        },
        chargingZones: {
            CC: "congestioncharge",
            LEZ: "lowemission"
        },
        chargingZonesDisplayText: {
            congestioncharge: "Congestion Charge",
            lowemission: "Low Emission"
        },
        throbberClasses: {
            button: "loading",
            div: "loading-information"
        },
        CONFIRMATIONIDPREFIX: "confirmed-item-",
        getConfirmationMessageID: function(suffix) {
            return this.CONFIRMATIONIDPREFIX + suffix;
        },
        googlePlaceTypes: [ "artgallery", "embassy", "hospital", "hotel", "museum", "park", "policestation", "school", "stadium", "university", "zoo", "landmark", "generic", "shoppingcentre" ],
        googlePlaceTypesExtra: [ "accounting", "administrative_area_level_1", "administrative_area_level_2", "administrative_area_level_3", "administrative_area_level_4", "administrative_area_level_5", "airport", "amusement_park", "aquarium", "art_gallery", "atm", "bakery", "bank", "bar", "beauty_salon", "bicycle_store", "book_store", "bowling_alley", "bus_station", "cafe", "campground", "car_dealer", "car_rental", "car_repair", "car_wash", "casino", "cemetery", "church", "city_hall", "clothing_store", "colloquial_area", "convenience_store", "country", "courthouse", "dentist", "department_store", "doctor", "electrician", "electronics_store", "establishment", "finance", "fire_station", "floor", "florist", "food", "funeral_home", "furniture_store", "gas_station", "general_contractor", "geocode", "grocery_or_supermarket", "gym", "hair_care", "hardware_store", "health", "hindu_temple", "home_goods_store", "insurance_agency", "intersection", "jewelry_store", "laundry", "lawyer", "library", "liquor_store", "local_government_office", "locality", "locksmith", "lodging", "meal_delivery", "meal_takeaway", "mosque", "movie_rental", "movie_theater", "moving_company", "natural_feature", "neighborhood", "night_club", "painter", "parking", "pet_store", "pharmacy", "physiotherapist", "place_of_worship", "plumber", "point_of_interest", "police", "political", "post_box", "post_office", "postal_code", "postal_code_prefix", "postal_code_suffix", "postal_town", "premise", "real_estate_agency", "restaurant", "roofing_contractor", "room", "route", "rv_park", "shoe_store", "shopping_mall", "spa", "storage", "store", "street_address", "street_number", "sublocality", "sublocality_level_1", "sublocality_level_2", "sublocality_level_3", "sublocality_level_4", "sublocality_level_5", "subpremise", "subway_station", "synagogue", "taxi_stand", "train_station", "transit_station", "travel_agency", "veterinary_care" ],
        localStorage: {
            hasPersonalisationBeenUsed: "has-personalisation-used"
        },
        TrackingEvar: {
            PersonalisationInPanelInteractions_24: {
                Name: "pers_in_panel_interaction_details",
                AccordionAction: "Accordion|{0}|{1}",
                ChevronAction: "Chevron|{0}|{1}",
                BusChevronAction: "Chevron|{0}|bus stop"
            },
            OpenEditPanel_25: {
                Name: "pers_add_edit_details",
                PublishedPanelModeAdd: "Published panel|{0}|add",
                PublishedPanelModeEdit: "Published panel|{0}|edit",
                FtuPanelMode: "FTU panel|{0}|add",
                HomepageMode: "Homepage|{0}|edit",
                StatusUpdateAdd: "Status updates|{0}|add",
                StatusUpdateEdit: "Status updates|{0}|edit",
                BusMapsAdd: "Bus interactive map|my buses|add",
                BusMapsEdit: "Bus interactive map|my buses|edit",
                BusStopAdd: "Bus stop{0}|my buses|add",
                BusStopEdit: "Bus stop{0}|my buses|edit",
                BusRouteAdd: "Bus route{0}|my buses|add",
                BusRouteEdit: "Bus route{0}|my buses|edit",
                BusLandingEdit: "Buses landing page|my buses|edit",
                JpFavJourneysView: "{0}|my journeys|view all",
                JpFavJourneysEdit: "{0}|my journeys|edit",
                JpRecentJourneysAdd: "{0}|recents|add",
                JpResultsAdd: "Plan a journey results|my journeys - my places|add",
                JpResultsEdit: "Plan a journey results|my journeys - my places|edit"
            },
            PersonalisationUser_26: {
                Name: "pers_new_return",
                NewUser: "New",
                ReturnUser: "Return"
            },
            JourneyPlannerSelection_27: {
                Name: "pers_jp_module_interaction",
                FavRecentPlaces: "{0}|recent searches - my places",
                FavPlacesOnly: "{0}|my places",
                RecentPlacesOnly: "{0}|recent searches",
                FavJourney: "{0}|favourited journey",
                RecentJourney: "{0}|recent journey",
                PlanJourney: "{0}|plan a journey"
            },
            ModesPlacesJourneySave_28: {
                Name: "pers_save_from_where",
                JourneysPlacesAdd: "Add panel|{0}|save",
                JourneysPlacesEdit: "Edit panel|{0}|save",
                RecentsOnly: "Add panel|my recents|save",
                ModesAdd: "Add panel|{0}|save",
                ModesEdit: "Edit panel|{0}|save"
            },
            PersonalisationAddEditPlaceLabelDetails_29: {
                Name: "pers_add_edit_placelabel_details",
                LabelAdd: "Add panel|my places|{0}",
                LabelEdit: "Edit panel|my places|{0}"
            }
        },
        TrackingEvent: {
            Name: "event_name",
            RecentJourneySelected_3: "jp_plan_recent_journey",
            PersonalisationInPanelInteraction_20: "pers_in_panel_interaction",
            JourneyPlannerAddEdit_21: "pers_add_edit",
            PersonalisationNewReturn_22: "pers_new_return",
            JourneyPlannerType_23: "pers_jp_module_interaction",
            PersonalisationSave_24: "pers_save",
            PersonalisationOnboardDisplayed_26: "pers_pop_up_box",
            PersonalisationAddEditPlaceLabel_28: "pers_add_edit_placelabel",
            PersonalisationOpenPanel_prop41: "pers_open_panel",
            PersonalisationClosePanel_prop42: "pers_close_panel",
            JourneyPlannerResultsInteraction_prop35: "jp_results_detail_interaction",
            MapViewClicked_prop45: "map_view_clicked",
            MapActivity_prop47: "map_activity"
        },
        TrackingProp: {
            JourneyPlannerResultsInteractionDetail_35: {
                Name: "jp_results_detail_interaction_details",
                MyLocation: "My Location"
            },
            OpenPanel_41: {
                Name: "pers_open_panel_details",
                GlobalStar: "Global Nav|Star",
                NotifictionTab: "Notification tab|view",
                HomepageView: "Homepage|{0}|view all",
                HomepageEdit: "Homepage|{0}|edit",
                JpFavJourneysView: "{0}|my journeys|view all",
                JpFavJourneysEdit: "{0}|my journeys|edit",
                JpRecentJourneysAdd: "{0}|recents|add",
                JpResultsAdd: "Plan a journey results|my journeys - my places|add",
                JpResultsEdit: "Plan a journey results|my journeys - my places|edit",
                StatusUpdateAdd: "Status updates|{0}|add",
                StatusUpdateEdit: "Status updates|{0}|edit",
                BusMapsAdd: "Bus interactive map|my buses|add",
                BusMapsEdit: "Bus interactive map|my buses|edit",
                BusStopAdd: "Bus stop{0}|my buses|add",
                BusStopEdit: "Bus stop{0}|my buses|edit",
                BusRouteAdd: "Bus route{0}|my buses|add",
                BusRouteEdit: "Bus route{0}|my buses|edit",
                BusLandingPageEdit: "Buses landing page|my buses|edit",
                BusLandingPageView: "Buses landing page|my buses|view all",
                OnboardingFtu: "Popup|ftu"
            },
            ClosePanel_42: {
                Name: "pers_close_panel_details",
                AddPanelMode: "Add panel|{0}|{1}",
                EditPanelMode: "Edit panel|{0}|{1}",
                PublishedPanelMode: "Published panel|{0}",
                FtuPanelMode: "FTU panel|{0}",
                AddPanelJourneyPlace: "Add panel|my journeys - my places|{0}",
                EditPanelJourneyPlace: "Edit panel|my journeys - my places|{0}",
                AddPanelJourneyRecents: "Add panel|my recents|{0}",
                EditPanelJourney: "Edit panel|my journeys|{0}",
                AddPanelPlace: "Add panel|my places|{0}",
                EditPanelPlace: "Edit panel|my places|{0}"
            },
            PersonalisationUser_44: {
                Name: "pers_pers_return_traffic",
                Value: "Return"
            },
            MapView_45: {
                Name: "map_view",
                Value: "Map view"
            },
            PageName_46: {
                Name: "prop46"
            },
            MapActivity_47: {
                Name: "map_activity_details",
                Value: "Map activity",
                ValueLoadMap: "Map activity|Load map",
                ValueOpenFullScreen: "Map activity|Open full screen"
            },
            FormName: {
                Name: "form_name"
            },
            FormSubmission: {
                Name: "form_submission"
            }
        },
        ImprovementsStatus: {
            0: "Unscoped",
            1: "In Concept",
            2: "Consultation Ended",
            3: "In Consultation",
            4: "In Construction",
            8: "Complete"
        },
        StatusSeverity: {
            SpecialService: 0,
            Closed: 1,
            Suspended: 2,
            PartSuspended: 3,
            PlannedClosure: 4,
            PartClosure: 5,
            SevereDelays: 6,
            ReducedService: 7,
            BusService: 8,
            MinorDelays: 9,
            GoodService: 10,
            PartClosed: 11,
            ExitOnly: 12,
            NoStepFreeAccess: 13,
            Changeoffrequency: 14,
            Diverted: 15,
            NotRunning: 16,
            IssuesReported: 17,
            NoIssues: 18,
            Information: 19,
            ServiceClosed: 20
        }
    };
})(window.tfl = window.tfl || {});

(function(o) {
    var trackEvar = tfl.dictionary.TrackingEvar;
    var trackEvent = tfl.dictionary.TrackingEvent;
    var trackProp = tfl.dictionary.TrackingProp;
    var fileName = getPageName(location.pathname);
    var pageName = fileName + " [" + document.title + "]";
    var pageRelative = getChannel(location.pathname);
    var channelName = pageRelative;
    var serverName = getServerName(location.href);
    var homepagenames = "|home.|default.|/|index.|";
    var namePortion = fileName.substring(0, fileName.indexOf(".") + 1);
    if (homepagenames.indexOf(namePortion) > 0) pageName = " [" + document.title + "]";
    o.account = null;
    o.code = null;
    o.pageName = pageRelative + ":" + pageName;
    o.server = serverName;
    o.pageType = "";
    o.prop1 = "";
    o.prop2 = "";
    o.prop3 = "";
    o.prop4 = "";
    getBreadcrumbProps();
    o.prop5 = "";
    o.prop11 = "";
    o.prop12 = "";
    o.prop35 = "";
    o.prop36 = "";
    o.campaign = "";
    o.prop40 = getStatusUpdatesPropValue();
    o[tfl.dictionary.TrackingProp.PersonalisationUser_44.Name] = getPersonalisationHasBeenUsed();
    o.state = "";
    o.zip = "";
    o.products = "";
    o.purchaseID = "";
    window.utag_data = {
        page_name: o.pageName,
        page_site_section: o.channel,
        page_site_section_2: o.prop1,
        page_site_section_3: o.prop2,
        page_site_section_4: o.prop3,
        page_site_section_5: o.prop4,
        page_type: "general",
        su_when: o.prop40,
        pers_pers_return_traffic: o.pers_pers_return_traffic
    };
    function getPageName(x) {
        return x.substring(x.lastIndexOf("/") + 1, x.length);
    }
    function getStatusUpdatesPropValue() {
        var url = window.location;
        if (url.pathname.toLowerCase().indexOf("status") >= 0) {
            var searchText = url.search;
            var prefix = "When:";
            var returnValue = prefix + "Now";
            var dtSelect = getQuryStringParamvalue("dateTypeSelect");
            if (dtSelect === "This%20weekend") {
                returnValue = prefix + dtSelect.replace("%20", " ");
            } else if (dtSelect === "Future%20date") {
                var oneDay = 24 * 60 * 60 * 1e3;
                var firstDate = new Date();
                var endDateSplits = getQuryStringParamvalue("endDate").split("-");
                var secondDate = new Date(endDateSplits[0], endDateSplits[1] - 1, endDateSplits[2].split("T")[0]);
                var diffDays = Math.round(Math.abs((firstDate.getTime() - secondDate.getTime()) / oneDay));
                returnValue = prefix + dtSelect.replace("%20", " ") + "|" + getQuryStringParamvalue("startDate").split("T")[0] + "|" + getDayOfWeek(secondDate.getDay()) + "|" + (diffDays + 1);
            }
            return returnValue;
        }
        return "";
    }
    function getPersonalisationHasBeenUsed() {
        var hasPersonalisationUsed;
        if (tfl.favourites && tfl.favourites.personalisation) {
            hasPersonalisationUsed = tfl.favourites.personalisation.hasBeenUsed();
        } else if (tfl.isLocalStorageSupported) {
            hasPersonalisationUsed = localStorage.getItem("has-personalisation-used");
        }
        return hasPersonalisationUsed && hasPersonalisationUsed === "true" ? tfl.dictionary.TrackingProp.PersonalisationUser_44.Value : "";
    }
    function getDayOfWeek(dayInInt) {
        var weekday = new Array(7);
        weekday[0] = "Sunday";
        weekday[1] = "Monday";
        weekday[2] = "Tuesday";
        weekday[3] = "Wednesday";
        weekday[4] = "Thursday";
        weekday[5] = "Friday";
        weekday[6] = "Saturday";
        return weekday[dayInInt];
    }
    function getQuryStringParamvalue(param) {
        var conditionedUrl = window.location.search.substr(1, window.location.search.length - 1);
        var paramList = conditionedUrl.split("&");
        var paramValue = "";
        for (var i = paramList.length - 1; i >= 0; i--) {
            var key = paramList[i].split("=")[0];
            var value = paramList[i].split("=")[1];
            if (key.toLowerCase() === param.toLowerCase()) {
                paramValue = value;
            }
        }
        return paramValue;
    }
    function getChannel(x) {
        var firstSlash = x.indexOf("/") + 1;
        var lastSlash = x.lastIndexOf("/") + 1;
        return x.substring(firstSlash, lastSlash - firstSlash);
    }
    function getBreadcrumbProps() {
        if (location.pathname.length) {
            var breadcrumbs = document.getElementsByClassName("breadcrumbs");
            var allListElements = "";
            if (breadcrumbs.length) {
                allListElements = breadcrumbs[0].getElementsByTagName("li");
            }
            for (var i = allListElements.length - 1; i >= 1; i--) {
                if (allListElements[i].getAttribute("class") === null) {
                    switch (i) {
                      case 1:
                        if (allListElements[i].getElementsByTagName("a").length) {
                            o.channel = allListElements[i].getElementsByTagName("a")[0].innerHTML;
                        } else {
                            o.channel = allListElements[i].getElementsByTagName("span")[0].innerHTML;
                        }
                        break;

                      case 2:
                        if (allListElements[i].getElementsByTagName("a").length) {
                            o.prop1 = allListElements[i].getElementsByTagName("a")[0].innerHTML;
                        } else {
                            o.prop1 = allListElements[i].getElementsByTagName("span")[0].innerHTML;
                        }
                        break;

                      case 3:
                        if (allListElements[i].getElementsByTagName("a").length) {
                            o.prop2 = allListElements[i].getElementsByTagName("a")[0].innerHTML;
                        } else {
                            o.prop2 = allListElements[i].getElementsByTagName("span")[0].innerHTML;
                        }
                        break;

                      case 4:
                        if (allListElements[i].getElementsByTagName("a").length) {
                            o.prop3 = allListElements[i].getElementsByTagName("a")[0].innerHTML;
                        } else {
                            o.prop3 = allListElements[i].getElementsByTagName("span")[0].innerHTML;
                        }
                        break;

                      case 5:
                        if (allListElements[i].getElementsByTagName("a").length) {
                            o.prop4 = allListElements[i].getElementsByTagName("a")[0].innerHTML;
                        } else {
                            o.prop4 = allListElements[i].getElementsByTagName("span")[0].innerHTML;
                        }
                        break;
                    }
                } else {
                    i = i - 1;
                }
            }
        }
    }
    function getServerName(x) {
        var firstSlash = x.indexOf("//") + 2;
        x = x.substring(firstSlash, x.length);
        return x.substring(0, x.indexOf("/"));
    }
    function tealiumTracking(tealiumTrackingObject) {
        if (typeof _satellite == "undefined") {
            tfl.logs.create("_satellite not defined - potential error with script from Adobe", "error");
            return;
        }
        if (tealiumTrackingObject && tealiumTrackingObject.newReturnUser) {
            var tealiumReturnUserItem = {};
            tealiumReturnUserItem[trackEvent.Name] = trackEvent.PersonalisationNewReturn_22;
            tealiumReturnUserItem[trackEvar.PersonalisationUser_26.Name] = tfl.favourites.personalisation.hasBeenUsed() ? trackEvar.PersonalisationUser_26.ReturnUser : trackEvar.PersonalisationUser_26.NewUser;
            _satellite.track("dcp", tealiumReturnUserItem);
            delete tealiumTrackingObject.newReturnUser;
        }
        dtmObject = tealiumTrackingObject;
        _satellite.track("dcp", dtmObject);
    }
    if (document.addEventListener) {
        document.addEventListener("click", function(e) {
            var element = closestTracked(e.target), $element = $(e.target), expanded;
            if (!element) return;
            var trackingItem = {};
            var trackingProp = element.getAttribute("data-tracking");
            var trackingValue = element.getAttribute("data-tracking-value");
            var trackingEvent = element.getAttribute("data-tracking-event");
            var newReturnUserValue = element.getAttribute("data-newReturnUser");
            if (!trackingEvent) {
                trackingEvent = getTrackingEvent(trackingProp);
            }
            trackingProp = getTrackingProp(trackingProp);
            trackingItem[trackEvent.Name] = trackingEvent;
            trackingItem[trackingProp] = trackingValue;
            if (newReturnUserValue && newReturnUserValue.length) {
                trackingItem.newReturnUser = newReturnUserValue;
            }
            if (element.parentElement) {
                if (element.parentElement.id === "home-status-bus") {
                    expanded = element.getAttribute("aria-expanded");
                } else {
                    expanded = element.parentElement.getAttribute("aria-expanded");
                }
            }
            if ($element && $element.is("a") && /^hide/gi.test($element.text())) {
                return;
            }
            if (expanded !== "false") {
                tfl.stats.tealiumTracking(trackingItem);
            }
            function closestTracked(element) {
                var origElement = element;
                while (element) {
                    if (element.getAttribute("data-tracking")) return element;
                    element = element.parentElement;
                }
                if (origElement && origElement.parentElement) {
                    var children = origElement.parentElement.childNodes;
                    if (children) {
                        for (var i = 0; i < children.length - 1; i++) {
                            if (children[i].getAttribute && children[i].getAttribute("data-tracking")) {
                                return children[i];
                            }
                        }
                    }
                }
                return null;
            }
            function getTrackingEvent(trackingProp) {
                switch (trackingProp) {
                  case "prop35":
                    return tfl.dictionary.TrackingEvent.JourneyPlannerResultsInteraction_prop35;

                  case "prop36":
                    return "accordion_expansion";

                  default:
                    return trackingProp;
                }
            }
            function getTrackingProp(trackingProp) {
                switch (trackingProp) {
                  case "prop35":
                    return tfl.dictionary.TrackingProp.JourneyPlannerResultsInteractionDetail_35.Name;

                  case "prop36":
                    return "accordion_expansion_details";

                  default:
                    return trackingProp;
                }
            }
        });
    }
    o.tealiumTracking = tealiumTracking;
})(window.tfl.stats = window.tfl.stats || {});

(function(o) {
    o.settings = {
        debug: true,
        version: "0.1",
        googleMapsLoaded: false,
        devices: [ {
            name: "Small",
            resolution: 10
        }, {
            name: "Medium",
            resolution: 580
        }, {
            name: "Large",
            resolution: 900
        } ]
    };
    o.logs = {
        create: function(message, type) {
            if (tfl.settings.debug && window.console) {
                switch (type) {
                  case "info":
                    console.info(message);
                    break;

                  case "warn":
                    console.warn(message);
                    break;

                  case "debug":
                    console.debug(message);
                    break;

                  case "error":
                    console.error(message);
                    break;

                  default:
                    console.log(message);
                    break;
                }
            }
        }
    };
})(window.tfl = window.tfl || {});